Intro: 4 
Given an array of integers, find the pair of adjacent elements that has the largest product and return that product.
Example
For inputArray = [3, 6, -2, -5, 7, 3], the output should be
adjacentElementsProduct(inputArray) = 21.
7 and 3 produce the largest product.

int adjacentElementsProduct(int[] inputArray) {
    int product = inputArray[0] * inputArray[1];
    for(int i = 1; i < inputArray.length-1; i++){
        int temp = inputArray[i] * inputArray[i+1];
        if(temp > product){
            product = temp;
        }
    }
    return product;
}



Core: Into the gates 2
Given an integer n, return the largest number that contains exactly n digits.
Example
For n = 2, the output should be
largestNumber(n) = 99.
Input/Output
•	[execution time limit] 3 seconds (java)
•	[input] integer n
Guaranteed constraints:
1 ≤ n ≤ 9.
•	[output] integer
o	The largest integer of length n.
Solution:
int largestNumber(int n) {
     
String s = "9";
for(int i=1; i<n; i++){
s = s + "9";
}
int result = Integer.parseInt(s);
return result;
}




Core : 9
You are playing an RPG game. Currently your experience points (XP) total is equal to experience. To reach the next level your XP should be at least at threshold. If you kill the monster in front of you, you will gain more experience points in the amount of the reward.
Given values experience, threshold and reward, check if you reach the next level after killing the monster.
Example
•	For experience = 10, threshold = 15, and reward = 5, the output should be
reachNextLevel(experience, threshold, reward) = true;
•	For experience = 10, threshold = 15, and reward = 4, the output should be
reachNextLevel(experience, threshold, reward) = false.

Solution:

boolean reachNextLevel(int experience, int threshold, int reward) {

    return experience + reward >= threshold;

}



Core: 13
Consider an arithmetic expression of the form a#b=c. Check whether it is possible to replace # with one of the four signs: +, -, * or /to obtain a correct expression.
Example
•	For a = 2, b = 3, and c = 5, the output should be
arithmeticExpression(a, b, c) = true.
We can replace # with a + to obtain 2 + 3 = 5, so the answer is true.
•	For a = 8, b = 2, and c = 4, the output should be
arithmeticExpression(a, b, c) = true.
We can replace # with a / to obtain 8 / 2 = 4, so the answer is true.
•	For a = 8, b = 3, and c = 2, the output should be
arithmeticExpression(a, b, c) = false.
o	8 + 3 = 11 ≠ 2;
o	8 - 3 = 5 ≠ 2;
o	8 * 3 = 24 ≠ 2;
o	8 / 3 = 2.(6) ≠ 2.
So the answer is false.
boolean arithmeticExpression(int A, int B, int C) {
    return A+B==C || A-B==C || A*B==C || A == B*C;
}


Intro:
Below we will define an n-interesting polygon. Your task is to find the area of a polygon for a given n.
A 1-interesting polygon is just a square with a side of length 1. An n-interesting polygon is obtained by taking the n - 1-interesting polygon and appending 1-interesting polygons to its rim, side by side. You can see the 1-, 2-, 3- and 4-interesting polygons in the picture below.
 
Example
•	For n = 2, the output should be
shapeArea(n) = 5;
•	For n = 3, the output should be
shapeArea(n) = 13.

Solution:
int shapeArea(int n) {
    return n*n + (n-1)*(n-1);
}



Core : Into the gates 7 
One night you go for a ride on your motorcycle. At 00:00 you start your engine, and the built-in timer automatically begins counting the length of your ride, in minutes. Off you go to explore the neighborhood.
When you finally decide to head back, you realize there's a chance the bridges on your route home are up, leaving you stranded! Unfortunately, you don't have your watch on you and don't know what time it is. All you know thanks to the bike's timer is that nminutes have passed since 00:00.
Using the bike's timer, calculate the current time. Return an answer as the sum of digits that the digital timer in the format hh:mmwould show.
Example
•	For n = 240, the output should be
lateRide(n) = 4.
Since 240 minutes have passed, the current time is 04:00. The digits sum up to 0 + 4 + 0 + 0 = 4, which is the answer.
•	For n = 808, the output should be
lateRide(n) = 14.
808 minutes mean that it's 13:28 now, so the answer should be 1 + 3 + 2 + 8 = 14.

Solution:
int lateRide(int n) {
    if(n>=0 && n<60*24){
        int first = n/60;
        int second = n%60;
        return first/10+first%10+second/10+second%10;
    }else{
        return 0;
    }

}


Core: 12
Given integers a and b, determine whether the following pseudocode results in an infinite loop
while a is not equal to b do
  increase a by 1
  decrease b by 1
Assume that the program is executed on a virtual machine which can store arbitrary long numbers and execute forever.
Example
•	For a = 2 and b = 6, the output should be
isInfiniteProcess(a, b) = false;
•	For a = 2 and b = 3, the output should be
isInfiniteProcess(a, b) = true.
Solution:
boolean isInfiniteProcess(int a, int b) {
return a > b || (b - a) % 2 == 1;
}

